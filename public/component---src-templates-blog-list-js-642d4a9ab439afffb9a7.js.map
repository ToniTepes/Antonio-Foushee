{"version":3,"sources":["webpack:///./src/components/date.js","webpack:///./src/components/pagination.js","webpack:///./src/templates/blog-list.js","webpack:///./src/components/items-blog.js"],"names":["data","d","Date","date","getDate","month","getMonth","year","getFullYear","pathContext","type","numPages","listItems","i","push","className","currentPage","key","to","title","charAt","toUpperCase","slice","Fragment","BlogList","render","query","this","props","datas","allMarkdownRemark","edges","length","id","React","Component","lang","BlogItem","componentDidMount","color","window","getComputedStyle","textSecondary","getPropertyValue","querySelector","setAttribute","fluid","node","frontmatter","image","childImageSharp","fields","slug","aria-label","style","opacity","description","ref","c","items","forEach","e","remove"],"mappings":"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","file":"component---src-templates-blog-list-js-642d4a9ab439afffb9a7.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function({ data }) {\r\n    let d = new Date(data),\r\n        months = [\r\n            \"January\",\r\n            \"February\",\r\n            \"March\",\r\n            \"April\",\r\n            \"May\",\r\n            \"June\",\r\n            \"July\",\r\n            \"August\",\r\n            \"September\",\r\n            \"October\",\r\n            \"November\",\r\n            \"December\"\r\n        ],\r\n        date = d.getDate(),\r\n        month = d.getMonth(),\r\n        year = d.getFullYear();\r\n    return (\r\n        <span>\r\n            {date} {months[month]} {year}\r\n        </span>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"gatsby\";\r\nimport { ChevronLeft, ChevronRight } from \"./icons\";\r\nimport \"../style/pagination.less\";\r\n\r\nexport default function({ pathContext, type }) {\r\n\r\n    if (pathContext.numPages > 1) {\r\n        let listItems = [];\r\n        for (let i = 1; i <= pathContext.numPages; i++) {\r\n            listItems.push(\r\n                <li\r\n                    className={i === pathContext.currentPage ? \"active\" : \"\"}\r\n                    key={\"PaginationItem\" + i}\r\n                >\r\n                    <Link\r\n                        to={\"/\" + type + \"/\" + (i === 1 ? \"\" : i)}\r\n                        title={\r\n                            type.charAt(0).toUpperCase() +\r\n                            type.slice(1) +\r\n                            \" - Page \" +\r\n                            i\r\n                        }\r\n                        key={\"PaginationItemA\" + i}\r\n                    >\r\n                        {i}\r\n                    </Link>\r\n                </li>\r\n            );\r\n        }\r\n        return (\r\n            <div className=\"pagination\">\r\n                <ul>\r\n                    {pathContext.currentPage !== 1 && (\r\n                        <li>\r\n                            <Link\r\n                                to={\r\n                                    \"/\" +\r\n                                    type +\r\n                                    \"/\" +\r\n                                    (pathContext.currentPage - 1 === 1\r\n                                        ? \"\"\r\n                                        : pathContext.currentPage - 1)\r\n                                }\r\n                                title=\"Previous Page\"\r\n                            >\r\n                                <span className=\"icon\">\r\n                                    <ChevronLeft />\r\n                                </span>\r\n                            </Link>\r\n                        </li>\r\n                    )}\r\n                    {listItems}\r\n                    {pathContext.currentPage !== pathContext.numPages && (\r\n                        <li>\r\n                            <Link\r\n                                to={\r\n                                    \"/\" +\r\n                                    type +\r\n                                    \"/\" +\r\n                                    (pathContext.currentPage + 1)\r\n                                }\r\n                                title=\"Next Page\"\r\n                            >\r\n                                <span className=\"icon\">\r\n                                    <ChevronRight />\r\n                                </span>\r\n                            </Link>\r\n                        </li>\r\n                    )}\r\n                </ul>\r\n            </div>\r\n        );\r\n    } else {\r\n        return <React.Fragment></React.Fragment>;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { graphql } from \"gatsby\";\r\nimport Layout from \"../components/layout\";\r\nimport BlogItems from \"../components/items-blog\";\r\nimport SectionTitle from \"../components/sectiontitle\";\r\nimport Pagination from \"../components/pagination\";\r\nimport SEO from \"../components/seo\";\r\n\r\nclass BlogList extends React.Component {\r\n    render() {\r\n        const query = this.props.datas;\r\n        if (query.allMarkdownRemark.edges.length > 0) {\r\n            return (\r\n                <section id=\"blog\" className=\"container\">\r\n                    <div className=\"section-title\">\r\n                        <SectionTitle title=\"BLOG\" />\r\n                    </div>\r\n                    <BlogItems data={query} />\r\n                    <Pagination\r\n                        pathContext={this.props.pathContext}\r\n                        type=\"blog\"\r\n                    />\r\n                </section>\r\n            );\r\n        } else {\r\n            return <React.Fragment></React.Fragment>;\r\n        }\r\n    }\r\n}\r\n\r\nexport default function({ data, pathContext }) {\r\n    return (\r\n        <Layout>\r\n            <SEO lang=\"en\" title=\"Blog\" />\r\n            <BlogList datas={data} pathContext={pathContext} />\r\n        </Layout>\r\n    );\r\n}\r\n\r\nexport const query = graphql`\r\n    query blogListPage($skip: Int!, $limit: Int!) {\r\n        allMarkdownRemark(\r\n            filter: { fileAbsolutePath: { regex: \"/blog/\" } }\r\n            sort: { fields: [frontmatter___date], order: DESC }\r\n            limit: $limit\r\n            skip: $skip\r\n        ) {\r\n            edges {\r\n                node {\r\n                    id\r\n                    frontmatter {\r\n                        title\r\n                        description\r\n                        date\r\n                        image {\r\n                            publicURL\r\n                            childImageSharp {\r\n                                fluid(maxWidth: 1920) {\r\n                                    srcSet\r\n                                    ...GatsbyImageSharpFluid\r\n                                }\r\n                                id\r\n                            }\r\n                        }\r\n                    }\r\n                    fields {\r\n                        slug\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n","import React from \"react\";\r\nimport { Link } from \"gatsby\";\r\nimport Img from \"gatsby-image\";\r\nimport Date from \"./date\";\r\nimport { Calendar } from \"./icons\";\r\nimport \"../style/list-blog.less\";\r\n\r\nclass BlogItem extends React.Component {\r\n    componentDidMount() {\r\n        this.color = window\r\n            .getComputedStyle(this.textSecondary, null)\r\n            .getPropertyValue(\"color\");\r\n        const calendar = this.textSecondary.querySelector(\"path\");\r\n        calendar.setAttribute(\"fill\", this.color);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"item col s12 m6\">\r\n                <div className=\"box\">\r\n                    <div className=\"image\">\r\n                        <Img\r\n                            fluid={\r\n                                this.props.data.node.frontmatter.image\r\n                                    .childImageSharp.fluid\r\n                            }\r\n                        />\r\n                        <Link\r\n                            to={this.props.data.node.fields.slug}\r\n                            title={this.props.data.node.frontmatter.title}\r\n                            aria-label={this.props.data.node.frontmatter.title}\r\n                            className=\"overlay-link\"\r\n                            style={{ opacity: 0 }}\r\n                        >\r\n                            {this.props.data.node.frontmatter.title}\r\n                        </Link>\r\n                    </div>\r\n                    <div className=\"content\">\r\n                        <h3 className=\"text-primary\">\r\n                            <Link\r\n                                to={this.props.data.node.fields.slug}\r\n                                title={this.props.data.node.frontmatter.title}\r\n                            >\r\n                                {this.props.data.node.frontmatter.title}\r\n                            </Link>\r\n                        </h3>\r\n                        <p className=\"text-tertiary\">\r\n                            {this.props.data.node.frontmatter.description}\r\n                        </p>\r\n                        <p\r\n                            className=\"date text-secondary\"\r\n                            ref={c => (this.textSecondary = c)}\r\n                        >\r\n                            <span className=\"icon\">\r\n                                <Calendar />\r\n                            </span>\r\n                            <Date\r\n                                data={this.props.data.node.frontmatter.date}\r\n                            />\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default function(props) {\r\n    const data = props.data.allMarkdownRemark.edges;\r\n    let items = [];\r\n    data.forEach(function(e, i) {\r\n        if (props.remove && e.node.id === props.remove) return;\r\n        items.push(<BlogItem key={e.node.id} data={e} />);\r\n    });\r\n    return <div className=\"row\">{items}</div>;\r\n}\r\n"],"sourceRoot":""}