{"version":3,"sources":["webpack:///./src/components/date.js","webpack:///./src/components/blogposts-latest.js","webpack:///./src/templates/blog.js","webpack:///./src/components/items-blog.js"],"names":["data","d","Date","date","getDate","month","getMonth","year","getFullYear","props","query","allMarkdownRemark","edges","length","id","className","remove","Fragment","lang","title","markdownRemark","frontmatter","description","image","publicURL","banner","fluid","childImageSharp","dangerouslySetInnerHTML","__html","html","BlogItem","componentDidMount","this","color","window","getComputedStyle","textSecondary","getPropertyValue","querySelector","setAttribute","render","node","to","fields","slug","aria-label","style","opacity","ref","c","React","Component","items","forEach","e","i","push","key"],"mappings":"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","file":"component---src-templates-blog-js-ba927a909c32b927769c.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function({ data }) {\r\n    let d = new Date(data),\r\n        months = [\r\n            \"January\",\r\n            \"February\",\r\n            \"March\",\r\n            \"April\",\r\n            \"May\",\r\n            \"June\",\r\n            \"July\",\r\n            \"August\",\r\n            \"September\",\r\n            \"October\",\r\n            \"November\",\r\n            \"December\"\r\n        ],\r\n        date = d.getDate(),\r\n        month = d.getMonth(),\r\n        year = d.getFullYear();\r\n    return (\r\n        <span>\r\n            {date} {months[month]} {year}\r\n        </span>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { useStaticQuery, graphql } from \"gatsby\";\r\nimport BlogItems from \"./items-blog\";\r\n\r\nexport default function(props) {\r\n    const query = useStaticQuery(graphql`\r\n        query latestBlogList {\r\n            allMarkdownRemark(\r\n                filter: { fileAbsolutePath: { regex: \"/blog/\" } }\r\n                limit: 6\r\n                sort: { fields: [frontmatter___date], order: DESC }\r\n            ) {\r\n                edges {\r\n                    node {\r\n                        id\r\n                        frontmatter {\r\n                            title\r\n                            description\r\n                            date\r\n                            image {\r\n                                publicURL\r\n                                childImageSharp {\r\n                                    fluid(maxWidth: 1920) {\r\n                                        srcSet\r\n                                        ...GatsbyImageSharpFluid\r\n                                    }\r\n                                    id\r\n                                }\r\n                            }\r\n                        }\r\n                        fields {\r\n                            slug\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    `);\r\n    if (query.allMarkdownRemark.edges.length > 0) {\r\n        return (\r\n            <section id=\"latest-blogposts\" className=\"container\">\r\n                <div className=\"section-title\">\r\n                    <h2>Latest Blogposts</h2>\r\n                </div>\r\n                <BlogItems data={query} remove={props.id} />\r\n            </section>\r\n        );\r\n    } else {\r\n        return <React.Fragment></React.Fragment>;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { graphql } from \"gatsby\";\r\nimport Img from \"gatsby-image\";\r\nimport Layout from \"../components/layout\";\r\nimport LatestPosts from \"../components/blogposts-latest\";\r\nimport SEO from \"../components/seo\";\r\nimport Date from \"../components/date\";\r\nimport \"../style/blog-singlepage.less\";\r\n\r\nexport default function({ data }) {\r\n    return (\r\n        <Layout>\r\n            <SEO\r\n                lang=\"en\"\r\n                title={data.markdownRemark.frontmatter.title}\r\n                description={data.markdownRemark.frontmatter.description}\r\n                image={data.markdownRemark.frontmatter.image.publicURL}\r\n            />\r\n            <div className=\"container\">\r\n                <article className=\"blog-post\">\r\n                    {data.markdownRemark.frontmatter.banner != null && (\r\n                        <div className=\"banner\">\r\n                            <Img\r\n                                fluid={\r\n                                    data.markdownRemark.frontmatter.banner\r\n                                        .childImageSharp.fluid\r\n                                }\r\n                            />\r\n                        </div>\r\n                    )}\r\n                    <div className=\"head text-primary\">\r\n                        <h1>{data.markdownRemark.frontmatter.title}</h1>\r\n                        <p className=\"post-date\">\r\n                            <Date data={data.markdownRemark.frontmatter.date} />\r\n                        </p>\r\n                    </div>\r\n                    <div className=\"content row flex\">\r\n                        <div\r\n                            className=\"col s12 m11 l10\"\r\n                            dangerouslySetInnerHTML={{\r\n                                __html: data.markdownRemark.html\r\n                            }}\r\n                        ></div>\r\n                    </div>\r\n                </article>\r\n                <LatestPosts id={data.markdownRemark.id} />\r\n            </div>\r\n        </Layout>\r\n    );\r\n}\r\n\r\nexport const query = graphql`\r\n    query($slug: String!) {\r\n        markdownRemark(fields: { slug: { eq: $slug } }) {\r\n            html\r\n            id\r\n            frontmatter {\r\n                title\r\n                date\r\n                description\r\n                image {\r\n                    publicURL\r\n                    childImageSharp {\r\n                        fluid(maxWidth: 1000) {\r\n                            srcSet\r\n                            ...GatsbyImageSharpFluid\r\n                        }\r\n                    }\r\n                }\r\n                banner {\r\n                    publicURL\r\n                    childImageSharp {\r\n                        fluid(maxHeight: 600, maxWidth: 1920) {\r\n                            srcSet\r\n                            ...GatsbyImageSharpFluid\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n","import React from \"react\";\r\nimport { Link } from \"gatsby\";\r\nimport Img from \"gatsby-image\";\r\nimport Date from \"./date\";\r\nimport { Calendar } from \"./icons\";\r\nimport \"../style/list-blog.less\";\r\n\r\nclass BlogItem extends React.Component {\r\n    componentDidMount() {\r\n        this.color = window\r\n            .getComputedStyle(this.textSecondary, null)\r\n            .getPropertyValue(\"color\");\r\n        const calendar = this.textSecondary.querySelector(\"path\");\r\n        calendar.setAttribute(\"fill\", this.color);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"item col s12 m6\">\r\n                <div className=\"box\">\r\n                    <div className=\"image\">\r\n                        <Img\r\n                            fluid={\r\n                                this.props.data.node.frontmatter.image\r\n                                    .childImageSharp.fluid\r\n                            }\r\n                        />\r\n                        <Link\r\n                            to={this.props.data.node.fields.slug}\r\n                            title={this.props.data.node.frontmatter.title}\r\n                            aria-label={this.props.data.node.frontmatter.title}\r\n                            className=\"overlay-link\"\r\n                            style={{ opacity: 0 }}\r\n                        >\r\n                            {this.props.data.node.frontmatter.title}\r\n                        </Link>\r\n                    </div>\r\n                    <div className=\"content\">\r\n                        <h3 className=\"text-primary\">\r\n                            <Link\r\n                                to={this.props.data.node.fields.slug}\r\n                                title={this.props.data.node.frontmatter.title}\r\n                            >\r\n                                {this.props.data.node.frontmatter.title}\r\n                            </Link>\r\n                        </h3>\r\n                        <p className=\"text-tertiary\">\r\n                            {this.props.data.node.frontmatter.description}\r\n                        </p>\r\n                        <p\r\n                            className=\"date text-secondary\"\r\n                            ref={c => (this.textSecondary = c)}\r\n                        >\r\n                            <span className=\"icon\">\r\n                                <Calendar />\r\n                            </span>\r\n                            <Date\r\n                                data={this.props.data.node.frontmatter.date}\r\n                            />\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default function(props) {\r\n    const data = props.data.allMarkdownRemark.edges;\r\n    let items = [];\r\n    data.forEach(function(e, i) {\r\n        if (props.remove && e.node.id === props.remove) return;\r\n        items.push(<BlogItem key={e.node.id} data={e} />);\r\n    });\r\n    return <div className=\"row\">{items}</div>;\r\n}\r\n"],"sourceRoot":""}